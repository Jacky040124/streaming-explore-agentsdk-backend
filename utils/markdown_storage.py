"""
Markdown storage utility for saving workflow results.
Converts ContentCreationResult to formatted markdown and saves to disk.
"""

from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple

from utils.models import ContentCreationResult
from utils.image_handler import ImageHandler


class MarkdownStorage:
    """Handles saving workflow results as markdown files."""
    
    def __init__(self, storage_dir: str = "outputs"):
        """
        Initialize storage with output directory.
        
        Args:
            storage_dir: Directory to store markdown files
        """
        self.storage_dir = Path(storage_dir)
        self.storage_dir.mkdir(exist_ok=True)
        self.image_handler = ImageHandler(str(self.storage_dir / "images"))
    
    def save_result(self, result: ContentCreationResult, filename: Optional[str] = None) -> str:
        """
        Save workflow result as a formatted markdown file.
        
        Args:
            result: The workflow result to save
            filename: Optional custom filename (without extension)
            
        Returns:
            Path to the saved markdown file
        """
        # Generate filename if not provided
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"content_{result.metadata.workflow_id[:8]}_{timestamp}"
        
        # Ensure .md extension
        if not filename.endswith('.md'):
            filename += '.md'
        
        # Save image if present
        image_path = ""
        if result.generated_image and not result.generated_image.startswith("Here is"):
            # Save the actual image
            _, image_path = self.image_handler.save_image_from_response(
                result.generated_image,
                result.metadata.workflow_id,
                "png"  # Default to PNG, could be extracted from response
            )
        
        # Generate markdown content with image path
        markdown_content = self._format_as_markdown(result, image_path)
        
        # Save to file
        file_path = self.storage_dir / filename
        file_path.write_text(markdown_content, encoding='utf-8')
        
        return str(file_path)
    
    def _format_as_markdown(self, result: ContentCreationResult, image_path: str = "") -> str:
        """
        Format ContentCreationResult as markdown.
        
        Args:
            result: The workflow result
            
        Returns:
            Formatted markdown string
        """
        # Format timestamp
        timestamp = result.metadata.timestamp.strftime("%B %d, %Y at %I:%M %p")
        
        markdown = f"""# Content Creation Result

**Generated on:** {timestamp}  
**Workflow ID:** {result.metadata.workflow_id}  
**Execution Time:** {result.metadata.execution_time_seconds:.2f} seconds  
**Status:** {result.metadata.status}

---

## Research Summary

{result.research_summary}

---

## Generated Content

### Image Prompt
> {result.image_prompt}

### Generated Image
{self._format_image_section(result.generated_image, image_path)}

### Story Prompt
> {result.story_prompt}

### Generated Story

{result.generated_story}

---

*Generated by Content Creation Workflow*
"""
        return markdown
    
    def _format_image_section(self, image_data: Optional[str], image_path: str = "") -> str:
        """
        Format the image section based on the type of data.
        
        Args:
            image_data: The image data (could be path, URL, or description)
            image_path: Path to saved image file (relative to markdown)
            
        Returns:
            Formatted image markdown
        """
        if not image_data:
            return "*[Image generation failed or not available]*"
        
        # If we have a saved image path, show it
        if image_path:
            return f"![Generated Image]({image_path})\n\n*Image saved to: {image_path}*"
        
        # If it's just a description (fallback)
        if image_data.startswith("Here is"):
            return f"*[Generated Image Description]*\n\n{image_data}"
        
        # Otherwise, it might be a URL or unprocessed data
        return f"*[Image data available but not saved]*\n\n{image_data[:100]}..."
    
    def list_outputs(self) -> list[str]:
        """
        List all markdown files in the output directory.
        
        Returns:
            List of markdown filenames
        """
        return [f.name for f in self.storage_dir.glob("*.md")]


# Convenience function for one-line usage
def save_workflow_result(result: ContentCreationResult, storage_dir: str = "outputs") -> str:
    """
    Save a workflow result to markdown file.
    
    Args:
        result: The workflow result to save
        storage_dir: Directory to store the file
        
    Returns:
        Path to the saved file
    """
    storage = MarkdownStorage(storage_dir)
    return storage.save_result(result)